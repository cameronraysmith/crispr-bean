#!/usr/bin/env python
"""Create Screen object (AnnData) from gRNA metadata, sample metadata, and count tables."""

import os
import argparse
import logging
from perturb_tools._readwrite._funcs._read_screen_from_csvs import read_csvs
from perturb_tools import Screen

logging.basicConfig(
    level=logging.INFO,
    format="%(levelname)-5s @ %(asctime)s:\n\t %(message)s \n",
    datefmt="%a, %d %b %Y %H:%M:%S",
    stream=sys.stderr,
    filemode="w",
)
error = logging.critical
warn = logging.warning
debug = logging.debug
info = logging.info


def get_input_parser() -> argparse.Namespace:
    """Add multi-sample specific arguments to the base parser."""
    print(
        r"""
    _ _       
  /  \ '\                      _        
  |   \  \     __ _ _ ___ __ _| |_ ___ 
   \   \  |   / _| '_/ -_) _` |  _/ -_)
    `.__|/    \__|_| \___\__,_|\__\___|
    """
    )
    parser = argparse.ArgumentParser(
        description="bean-create parameters",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        "gRNA_info_table_csv",
        type=str,
        help="Path to gRNA info .csv table, with index at first column and column names at the first row.",
        required=True,
    )
    parser.add_argument(
        "samples_info_table_csv",
        type=str,
        help="Path to sample info .csv table, with index at first column and column names at the first row.",
        required=True,
    )
    parser.add_argument(
        "gRNA_counts_table_csv",
        type=str,
        help="Path to gRNA counts .csv table, with index at first column and column names at the first row.",
        required=True,
    )
    parser.add_argument(
        "-e",
        "--edits",
        type=str,
        help="Path to edit counts .csv table, with index at first column and column names at the first row.",
        default=None,
    )
    parser.add_argument(
        "-o",
        "--output-prefix",
        type=str,
        help="Output file prefix (output will be saved as `output_prefix.h5ad`). If not provided, `gRNA_counts_table_csv` file prefix is used.",
        default=None,
    )
    return parser


def create_screen(args: argparse.Namespace) -> Screen:
    return read_csvs(
        args.gRNA_counts_table_csv,
        args.gRNA_info_table_csv,
        args.samples_info_table_csv,
        layers_filename_dict={"edits": args.edits} if args.edits else None,
    )


def main():
    parser = get_input_parser()
    args = parser.parse_args()
    screen = create_screen(args)
    info(f"Done obtaining screen:\n{screen}\nWriting result...")
    output_path = f"{args.output_prefix if args.output_prefix else os.path.splitext(args.gRNA_counts_table_csv)[0]}.h5ad"
    screen.write(output_path)
    info(f"Done writing screen object to {output_path}.")


if __name__ == "__main__":
    main()
